static const char *python_script =
"def merge(arr, l, m, r):\n"
"    n1 = m - l + 1\n"
"    n2 = r - m\n"
" \n"
"    # create temp arrays\n"
"    L = [0] * (n1)\n"
"    R = [0] * (n2)\n"
" \n"
"    # Copy data to temp arrays L[] and R[]\n"
"    for i in range(0, n1):\n"
"        L[i] = arr[l + i]\n"
" \n"
"    for j in range(0, n2):\n"
"        R[j] = arr[m + 1 + j]\n"
" \n"
"    # Merge the temp arrays back into arr[l..r]\n"
"    i = 0     # Initial index of first subarray\n"
"    j = 0     # Initial index of second subarray\n"
"    k = l     # Initial index of merged subarray\n"
" \n"
"    while i < n1 and j < n2:\n"
"        if L[i] <= R[j]:\n"
"            arr[k] = L[i]\n"
"            i += 1\n"
"        else:\n"
"            arr[k] = R[j]\n"
"            j += 1\n"
"        k += 1\n"
" \n"
"    # Copy the remaining elements of L[], if there\n"
"    # are any\n"
"    while i < n1:\n"
"        arr[k] = L[i]\n"
"        i += 1\n"
"        k += 1\n"
" \n"
"    # Copy the remaining elements of R[], if there\n"
"    # are any\n"
"    while j < n2:\n"
"        arr[k] = R[j]\n"
"        j += 1\n"
"        k += 1\n"
" \n"
"# l is for left index and r is right index of the\n"
"# sub-array of arr to be sorted\n"
" \n"
" \n"
"def mergeSort(arr, l, r):\n"
"    if l < r:\n"
" \n"
"        # Same as (l+r)//2, but avoids overflow for\n"
"        # large l and h\n"
"        m = l+(r-l)//2\n"
" \n"
"        # Sort first and second halves\n"
"        mergeSort(arr, l, m)\n"
"        mergeSort(arr, m+1, r)\n"
"        merge(arr, l, m, r)\n"
" \n"
"\n"
"def main():\n"
"    arr = [2, 5, 1, -3, -4, 1000]\n"
"    mergeSort(arr, 0, len(arr)-1)\n"
"    print(arr)\n"
"\n"
"main()\n"
;